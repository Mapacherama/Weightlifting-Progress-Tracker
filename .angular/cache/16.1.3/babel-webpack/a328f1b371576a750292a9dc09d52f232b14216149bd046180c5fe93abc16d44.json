{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(AuthService, router) {\n    this.AuthService = AuthService;\n    this.router = router;\n  }\n  canActivate(route, state) {\n    if (this.AuthService.isLoggedIn()) {\n      // Assuming the AuthService has an isLoggedIn function\n      return true;\n    } else {\n      this.router.navigate(['/login']); // Assuming '/login' is your login route\n      return false;\n    }\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["AuthGuard","constructor","AuthService","router","canActivate","route","state","isLoggedIn","navigate","i0","ɵɵinject","i1","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Administrator\\Documents\\GitHub\\Weightlifting-Progress-Tracker\\src\\app\\services\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from './auth.service'; // Import your AuthService\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private AuthService: AuthService, private router: Router) {}\r\n\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n    if (this.AuthService.isLoggedIn()) { // Assuming the AuthService has an isLoggedIn function\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['/login']); // Assuming '/login' is your login route\r\n      return false;\r\n    }\r\n  }\r\n}\r\n"],"mappings":";;;AAQA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAEvEC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAC1B,IAAI,IAAI,CAACJ,WAAW,CAACK,UAAU,EAAE,EAAE;MAAE;MACnC,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAClC,OAAO,KAAK;;EAEhB;;AAbWR,SAAS,C;mBAATA,SAAS,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAT,WAAA,GAAAO,EAAA,CAAAC,QAAA,CAAAE,EAAA,CAAAC,MAAA;AAAA;AAATb,SAAS,C;SAATA,SAAS;EAAAc,OAAA,EAATd,SAAS,CAAAe,IAAA;EAAAC,UAAA,EAFR;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}